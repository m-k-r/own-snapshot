# ----------------------------- Global Variables -------------------------------

version_list=(1.0 1.1 1.2)
upgrade_complete="1.1"

# --------------------------------- Upgrades -----------------------------------

function upgrade1.2 {
	# get config block
	block_config_old=$(awk '/^#config#$/ {flag=!flag; count+=1; next} flag && count < 2 {print}' ${dir_element}/"${element_matching}"${file_extension})
	# save custom settings
	element_server=$(sed -n '/^server =/p' <<< ${block_config_old} 2> /dev/null)
	element_mode=$(sed -n '/^mode =/p' <<< ${block_config_old} 2> /dev/null)
	element_label=$(sed -n '/^label =/p' <<< ${block_config_old} 2> /dev/null)
	element_dateformat=$(sed -n '/^dateformat =/p' <<< ${block_config_old} 2> /dev/null)
	element_credentials=$(sed -n '/^credentials =/p' <<< ${block_config_old} 2> /dev/null)
	element_encryption=$(sed -n '/^encryption =/p' <<< ${block_config_old} 2> /dev/null)
	element_user=$(sed -n '/^user =/p' <<< ${block_config_old} 2> /dev/null)
	element_separator=$(sed -n '/^separator =/p' <<< ${block_config_old} 2> /dev/null)
	element_location=$(sed -n '/^snap_location =/p' <<< ${block_config_old} 2> /dev/null)

	# write new config block
	block_config_new="version = 1.2"'\n'
	block_config_new+=${element_server}'\n'
	block_config_new+=${element_mode}'\n'
	block_config_new+=${element_label}'\n'
	block_config_new+="identifier = number"'\n'
	block_config_new+=${element_dateformat}'\n'
	block_config_new+=${element_separator}'\n'
	block_config_new+="snap_flags ="'\n'
	block_config_new+=${element_location}'\n'
	block_config_new+=${element_credentials}'\n'
	block_config_new+=${element_encryption}'\n'
	block_config_new+="compression ="'\n'
	block_config_new+=${element_user}

	# delete old config block
	sed -i "/^#config#/,/^#config#/!b;//!d" ${dir_element}/"${element_matching}"${file_extension}
	# and write new one
	sed -i "0,/^#config/ s;#config#;&\n${block_config_new};" ${dir_element}/"${element_matching}"${file_extension}

	# with version 1.2 lxd and zfs query source instead of target.
	if [[ "${element_mode}" == "mode = zfs" ]] || [[ "${element_mode}" == "mode = lxd" ]]; then
		# get target block
		block_target_old=$(awk '/^#target#$/ {flag=!flag; count+=1; next} flag && count < 2 {print}' ${dir_element}/"${element_matching}"${file_extension})
		
		# sed doesn't like multi line strings.
		for target in ${block_target_old}
		do	block_target_new+=${target}'\n'
		done
		block_target_new=$(echo "${block_target_new}" | rev | cut -c 3- | rev)
		
		# cleanup the source and target blocks
		sed -i "/^#source#/,/^#source#/!b;//!d" ${dir_element}/"${element_matching}"${file_extension}
		sed -i "/^#target#/,/^#target#/!b;//!d" ${dir_element}/"${element_matching}"${file_extension}
		# write old target block into source block
		sed -i "0,/^#source/ s;#source#;&\n${block_target_new};" ${dir_element}/"${element_matching}"${file_extension}
		unset block_target_new
	fi
}

function upgrade1.1 {
	do-initial
	for element_matching in ${elements_matching}
	do	do-backup

		# probe is set by do-backup
		if [[ -n "${probe}" ]]; then
			mkdir -p ${dir_element}/$(echo "${element_matching}" | rev | cut -d "/" -f 2- | rev)
		fi

		# copy the elements to the new directory
		rsync -a ${dir_conf}/"${element_matching}".conf ${dir_element}/"${element_matching}"${file_extension}
		sed -i "s;version = 1.0;version = 1.1;g" ${dir_element}/"${element_matching}"${file_extension} 2> /dev/null
		rm -f ${dir_conf}/"${element_matching}".conf
	done

	echo "${elements_matching_number} element(s) upgraded to version ${version_next}:"
	echo "${elements_matching}"
}

function upgrade1.0 {
	# save custom settings
	config_credentials=$(sed -n '/credentials =/p' ${dir_conf}/"${element_matching}".conf 2> /dev/null | cut -d " " -f 3-)
	config_certificate=$(sed -n '/certificate =/p' ${dir_conf}/"${element_matching}".conf 2> /dev/null | cut -d " " -f 3-)
	config_user=$(sed -n '/user =/p' ${dir_conf}/"${element_matching}".conf 2> /dev/null | cut -d " " -f 3-)
	config_server=$(sed -n '/server =/p' ${dir_conf}/"${element_matching}".conf 2> /dev/null | cut -d " " -f 3)
	config_port=$(sed -n '/server =/p' ${dir_conf}/"${element_matching}".conf 2> /dev/null | cut -d " " -f 5)
	config_snap_location=$(sed -n '/server =/p' ${dir_conf}/"${element_matching}".conf 2> /dev/null | cut -d " " -f 4)
	config_mode=$(sed -n '/mode =/p' ${dir_conf}/"${element_matching}".conf 2> /dev/null | cut -d " " -f 3-)
	config_label=$(sed -n '/label =/p' ${dir_conf}/"${element_matching}".conf 2> /dev/null | cut -d " " -f 3-)
	config_dateformat=$(sed -n '/dateformat =/p' ${dir_conf}/"${element_matching}".conf 2> /dev/null | cut -d " " -f 3-)
	config_separator=$(sed -n '/separator =/p' ${dir_conf}/"${element_matching}".conf 2> /dev/null | cut -d " " -f 3-)
	config_table=$(tail -n +9 ${dir_conf}/"${element_matching}".conf 2> /dev/null)

	# get changes for new layout
	if [[ -n "${config_port}" ]]; then
		config_server="${config_server} ${config_port}"
	fi

	# get table
	config_table_columns=$(head -n 1 <<< "${config_table}" | awk -F ' ' '{print NF}')
	config_source=$(awk -v col=${config_table_columns} ' { print $col } ' <<< "${config_table}" | tail -n +2)
	config_target=$(awk ' { print $1 } ' <<< "${config_table}" | tail -n +2)
	config_table=$(cut -f 3-7 <<< "${config_table}")

	# build new element
	new_element="#config#"$'\n'
	new_element+="version = 1.0"$'\n'
	new_element+="server = ${config_server}"$'\n'
	new_element+="mode = ${config_mode}"$'\n'
	new_element+="label = ${config_label}"$'\n'
	new_element+="dateformat = ${config_dateformat}"$'\n'
	new_element+="credentials = ${config_credentials}"$'\n'
	new_element+="encryption = ${config_certificate}"$'\n'
	new_element+="user = ${config_user}"$'\n'
	new_element+="separator = ${config_separator}"$'\n'
	new_element+="snap_location = ${config_snap_location}"$'\n'
	new_element+="archival ="$'\n'
	new_element+="#config#"$'\n'$'\n'
	new_element+="#table#"$'\n'
	new_element+=${config_table}$'\n'
	new_element+="#table#"$'\n'$'\n'
	new_element+="#source#"$'\n'
	new_element+=${config_source}$'\n'
	new_element+="#source#"$'\n'$'\n'
	new_element+="#target#"$'\n'
	new_element+=${config_target}$'\n'
	new_element+="#target#"$'\n'

	# print new element to file
	echo "${new_element}" > ${dir_conf}/"${element_matching}".conf 2> /dev/null
}

#!/bin/bash
#
# -----------------------------------------------------------------------------
#
# Author:	Marcel Keller (m-k-r)
# Usage:	uses config files to create and delete snapshots for btrfs, zfs, file, directory, mysql, pgsql and kvm
# License:	GPLv3 http://www.gnu.org/licenses/gpl-3.0
#
# ----------------------------- Global Variables ------------------------------

version=1.0
usage="usage: own-snapshot [parameter]

 -c	name of the config file without '.conf' at the end
 -d	debug level: previous, commands, config, snapshots, full
 -e	don't create new snapshots. used to handle snapshots or files created by other programms
 -f	the frequency as defined in the config file (hourly, daily, weekly)
 -l	either date-string (list) or complete label (single). mainly used by ownbackup
 -v	show version of this script
 -h	this page

parameter used by ownbackup

 -m	mode (btrfs, zfs)
 -o	target for snapshot
 -p	port for ssh
 -q	path to credentials file for sql
 -r	source for snapshot
 -s	server
 -z	certificate file"
conf_dir="/etc/own-snapshot/"
mode_supported="btrfs zfs directory file kvm mysql pgsql"
config_options_rsync="-a"

# --------------------------------- Parameter ----------------------------------

if [ "$#" == "0" ]
	then	echo "${usage}" && exit 0
fi

while getopts ":c:d:e:f:l:m:o:p:q:r:s:z:vh" opt; do
	case ${opt} in
		c)	config=$OPTARG
			;;
		d)	debug=$OPTARG
			;;
		e)	snapshots_existing_only=$OPTARG
			;;
		f)	snap_list_frequency=$OPTARG
			;;
		l)	snap_string=$OPTARG
			;;
		m)	mode=$OPTARG
			;;
		o)	snap_set=($OPTARG)
			;;
		p)	config_port=($OPTARG)
			;;
		q)	config_credentials=$OPTARG
			;;
		r)	root_set=($OPTARG)
			;;
		s)	config_server=$OPTARG
			;;
		z)	config_certificate=$OPTARG
			;;
		v)	echo "${version}"
			exit 0
			;;
		h)	echo "${usage}"
			exit 0
			;;
		?)	echo "Invalid option: -$OPTARG" >&2
			exit 1
			;;
	esac
done

# -----------------------------------------------------------------------------

## debug-level:
##	previous:	checks if previous snapshot with the same name exists
##	commands:	show commands for snapshot & snapshot-deletion
##	snapvars:	from own-backup will be translated to commands
##	config:		checks if the configuration is valid
##	snapshots:	commands + show the snapshotlists, -numbers
##	full:		all the above

# define debuglevel
if [ -n "${debug}" ]
	then	if [ "${debug}" == "config" ]
			then	check_config="set"

			elif [ "${debug}" == "previous" ]
				then	check_previous="set"

			elif [ "${debug}" == "commands" ]
				then	check_commands="set"

			elif [ "${debug}" == "snapvars" ]
				then	check_commands="set"

			elif [ "${debug}" == "snapshots" ]
				then	check_commands="set"
					check_snapshots="set"
					snapshots_existing_only=set

			elif [ "${debug}" == "full" ]
				then	check_config="set"
					check_previous="set"
					check_commands="set"
					check_snapshots="set"

			else	echo "no supported debug-level found: ${debug}" && exit 1
		fi
fi

# define the function and basic parameters
if [ -n "${config}" ]
	then	config_function="list"
		conf="${conf_dir}${config}.conf"
	else	config_function="single"
		snap_limit=(1)
fi

if [ "${config_function}" == "list" ]
	then	# check if config is set
		if [ "$check_config" == "set" ]
			then	probe=$(find ${conf} 2>&1)
				if [ ! "${probe}" == "${conf}" ]
					then	echo "the config does not exist" && exit 1
				fi
		fi

		# get content of the config file
		config_complete=$(head -9 ${conf})
		config_table_snap=$(tail -n +10 ${conf})
		config_credentials=$(sed -n 1p <<< "${config_complete}" | cut -d " " -f 3)
		config_certificate=$(sed -n 2p <<< "${config_complete}" | cut -d " " -f 3)
		config_user=$(sed -n 3p <<< "${config_complete}" | cut -d " " -f 3)
		config_server=$(sed -n 4p <<< "${config_complete}" | cut -d " " -f 3)
		config_target=$(sed -n 4p <<< "${config_complete}" | cut -d " " -f 4)
		config_port=$(sed -n 4p <<< "${config_complete}" | cut -d " " -f 5)
		mode=$(sed -n 5p <<< "${config_complete}" | cut -d " " -f 3)
		snap_label=$(sed -n 6p <<< "${config_complete}" | cut -d " " -f 3)
		snap_string_separator_1=$(sed -n 8p <<< "${config_complete}" | cut -d " " -f 3)
		snap_string_separator_2=$(sed -n 8p <<< "${config_complete}" | cut -d " " -f 4)
		snap_list_frequency_list=$(sed -n 9p <<< "${config_complete}")

		# snap_string can be given by argument so that all snapshots follow the same scheme
		if [ -n "${snap_string}" ]
			then	snap_date=${snap_string}
			else	snap_date=$(date +$(sed -n 7p <<< "${config_complete}" | cut -d " " -f 3))
		fi

		bb="0"
		# get the current frequency of snapshots
		for snap_list_frequency_list_element in ${snap_list_frequency_list}
		do	bb=$((${bb} + 1))
			if [ "${snap_list_frequency_list_element}" == "${snap_list_frequency}" ]
				then	break
			fi
		done

		if [ ! "${snap_list_frequency_list_element}" == "${snap_list_frequency}" ]
			then	echo "frequency not found" >&2 && exit 1
		fi

		# the snap_string_separators need to be flexible for handling date-based versioning from other sources
		if [ ! -n "${snap_string_separator_2}" ]
			then	snap_string_separator_2="_"
			elif [ "${snap_string_separator_2}" == "empty" ]
				then	unset snap_string_separator_2
		fi

		# since the first field is the snap_set and the second is =, the snap_nmbr is 2 less then the field that has to be read
		if [ ! "${snapshots_existing_only}" == "no_nmbr" ]
			then	snap_nmbr=$((${bb} - 2))
		fi
		snap_name="${snap_label}""${snap_nmbr}""${snap_string_separator_2}"
		snap_string="${snap_name}""${snap_date}"

		# Backup the ifs and change it. The internal field separator has to be changed teporarily so that the for-loop works line by line.
		IFSBAK=${IFS}
		IFS=$'\n'
		aa="-1"

		# get the datasets for snapshotting
		for snap_line in ${config_table_snap}
		do	aa=$((${aa} + 1))
			snap_set[aa]=$(echo ${snap_line} | cut -f 1)
			root_set[aa]=$(echo ${snap_line} | rev | cut -f 1 | rev)
			snap_limit[aa]=$(echo ${snap_line} | cut -f ${bb})
		done

		unset bb conf config_complete config_table_snap snap_date
		IFS=${IFSBAK}

	else

		if [ -n "${config_server}" ]
			then	probe=$(echo ${server} | grep "#" || true)
				if [ -n "${probe}" ]
					then	config_target=$(echo ${config_server} | cut -d "#" -f 2)
						config_server=$(echo ${config_server} | cut -d "#" -f 1)
				fi
		fi
fi

# translate mode to mode_create and mode_snapshot
if [ -n "${mode}" ]
	then	if [ "${mode}" == "btrfs" ] || [ "${mode}" == "kvm" ] || [ "${mode}" == "zfs" ]
			then	mode_create=${mode}
				mode_snapshot=${mode}

			elif [ "${mode}" == "directory" ]
				then	mode_create=rsync
					mode_snapshot=file

			elif [ "${mode}" == "mysql" ] || [ "${mode}" == "pgsql" ]
				then	mode_create=pipe
					mode_snapshot=file

			elif [ "${mode}" == "file" ]
				then	if [ -n "${config_certificate}" ]
						then	mode_create=pipe
						else	mode_create=rsync
					fi

					mode_snapshot=file

			else	echo "${mode} is not supported mode. Valid are: ${mode_supported}" && exit 1
		fi

	else	echo "no mode is set" && exit 1
fi

if [ -n "${config_server}" ]
	then	if [ -n "${config_port}" ]
			then	config_port=" -p ${config_port}"
		fi

		if [ ! "${mode_create}" == "pipe" ] || [ "${config_target}" == "server" ]
			then	config_ssh_source_part1="ssh ${config_server}${config_port} \""
				config_ssh_source_part2="\""
				config_ssh_target_part1="ssh ${config_server}${config_port} \""
				config_ssh_target_part2="\""

			elif	[ "${config_target}" == "local" ]
				then	config_ssh_source_part1="ssh ${config_server}${config_port} \""
					config_ssh_source_part2="\""

			elif	[ "${config_target}" == "remote" ]
				then	config_ssh_target_part1="ssh ${config_server}${config_port} \""
					config_ssh_target_part2="\""

			else	echo "something is wrong with the ssh settings" && exit 1
		fi

		unset config_target
fi

if [ "${mode_create}" == "pipe" ] && [ -n "${config_certificate}" ]
	then	snap_encrypt=" | openssl smime -encrypt -binary -text -aes256 -outform DER ${config_certificate}"
fi

if [ "${mode_create}" == "pipe" ] || [ "${mode_create}" == "rsync" ]
	then	#set back the control variable
		aa="-1"

		# mode_create=pipe use chown to set a specific user. And since they are file-based they might have dot-sepparated file-types. It is convenient if this stays at the end.
		for root_set_element in "${root_set[@]}"
		do	aa=$((${aa} + 1))

			probe=$(echo ${snap_set[aa]} | rev | cut -c 1)
			if [ ! "${probe}" == "/" ]
				then	snap_file[aa]=$(echo "${snap_set[aa]}" | rev | cut -d "/" -f 1 | rev)
					snap_set[aa]=$(echo "${snap_set[aa]}" | rev | cut -d "/" -f 2- | rev)/
				else	snap_file[aa]=$(echo "${root_set_element}" | rev | cut -d "/" -f 1 | rev)
			fi

			probe=$(echo "${snap_file[aa]}" | grep "\.")
			if [ -n "${probe}" ]
				then	snap_file_type[aa]=.$(echo "${snap_file[aa]}" | cut -d "." -f 2-)
					snap_file[aa]=$(echo "${snap_file[aa]}" | cut -d "." -f 1)
			fi
		done
fi

snap_string_offset=$((${#snap_string}))
if [ "${mode_create}" == "zfs" ] || [ "${mode_create}" == "kvm" ]
	then	snap_string_separator_1="@"
	elif [ ! -n "${snap_string_separator_1}" ]
		then	snap_string_separator_1="_"
fi
snap_string_complete=${snap_string_separator_1}${snap_string}
#snap_name=${snap_string_separator_1}${snap_name}

# config_user has to be in the format user_id:group_id
if [ -n "${config_user}" ]
	then	probe=$(echo ${config_user} | grep ":" || true)
		if [ ! -n "${probe}" ]
			then	config_user="${config_user}:${config_user}"
		fi

		aa="-1"

		for root_set_element in "${root_set[@]}"
		do	aa=$((${aa} + 1))
			change_user[aa]=" && chown -R ${config_user} ${snap_set[aa]}${snap_file[aa]}${snap_string_complete}${snap_file_type[aa]}"
		done
fi

# internally mode_create is not different from file execpt an additional / so that rsync doesn't copy the directory inside the target but change the name to it
if [ "${mode_create}" == "directory" ]
	then	config_options_rsync2="/"
		mode_create=file
fi

#set back the control variable
aa="-1"

if [ "${check_config}" == "set" ]
	then	if [ ! -n "${snap_set}" ] || [ -z "${snap_set}" ]
			then	echo "Target is not set or empty" && exit 1
		fi

		if [ ! -n "${root_set}" ] || [ -z "${root_set}" ] && [ ! "${mode_create}" == "zfs" ]
			then	echo "Source is not set or empty" && exit 1
		fi

		echo "mode is: ${mode_create} and the frequency is: ${snap_list_frequency}"
		echo "label, frequency and date is: ${snap_string} with the length: ${snap_string_offset}"
		echo "the sourceserver is: ${config_server}. Valid is an ip, a dns or empty"
		echo "Target, Snapshotnumer and Source are:"

		for snap_set_element in "${snap_set[@]}"
		do	aa=$((${aa} + 1)) 
			echo "${snap_set[aa]}${snap_file[aa]}${snap_string_complete}${snap_file_type[aa]} ${snap_limit[aa]} ${root_set[aa]}"
		done
		aa="-1"

		if [ "${mode_create}" == "file" ] || [ "${mode_create}" == "mysql" ] || [ "${mode_create}" == "pgsql" ]
			then	echo "user:group is: ${config_user}"
				echo "the path to the certificate is: ${config_certificate}"
				echo "the target for the snapshot is: ${config_target}. Valid is local, remote and empty"
		fi

		if [ "${mode_create}" == "mysql" ]
			then	echo "the path to the credentials is: ${config_credentials}"
		fi

		if [ ! "${check_commands}" == "set" ]
			then	exit 0
		fi
fi

for snap_set_element in "${snap_set[@]}"
do	aa=$((${aa} + 1))

	if [ ! -z "${snap_limit[aa]}" ] && [ ! "${snap_limit[aa]}" == "0" ]
		then	if [ "${check_commands}" == "set" ]
				then	printf -- "\n--------------- ${snap_set_element}${snap_file[aa]}${snap_string_complete}${snap_file_type[aa]} ---------------\n"
			fi

			if [ "${check_previous}" == "set" ]
				then	if [ "${mode_snapshot}" == "btrfs" ] || [ "${mode_snapshot}" == "file" ]
						then	if [ -n "${config_ssh_source_part1}" ]
								then	probe=$(ssh ${config_server}${config_port} "find ${snap_set[aa]}${snap_file[aa]}${snap_string_complete}${snap_file_type[aa]} -maxdepth 0 2> /dev/null")
								else	probe=$(find ${snap_set[aa]}${snap_file[aa]}${snap_string_complete}${snap_file_type[aa]} -maxdepth 0 2> /dev/null)
							fi

						elif [ "${mode_snapshot}" == "zfs" ]
							then	if [ ! -z ${root_set[aa]} ]
									then	if [ -n "${config_ssh_source_part1}" ]
											then	probe=$(ssh ${config_server}${config_port} "find ${root_set[aa]}/.zfs/snapshot/${snap_string} -maxdepth 0 2> /dev/null")
											else	probe=$(find ${root_set[aa]}/.zfs/snapshot/${snap_string} -maxdepth 0 2> /dev/null)
										fi

									else	if [ -n "${config_ssh_source_part1}" ]
											then	probe=$(ssh ${config_server}${config_port}${config_port} "zfs list -t snapshot | grep ${snap_set[aa]}${snap_string_complete}")
											else	probe=$(zfs list -t snapshot | grep ${snap_set[aa]}${snap_string_complete})
										fi
								fi

						elif [ "${mode_snapshot}" == "kvm" ]
							then	if [ -n "${config_ssh_source_part1}" ]
									then	probe=$(ssh ${config_server}${config_port} "qm listsnapshot ${root_set[aa]} | grep ${snap_string} 2> /dev/null")
									else	probe=$(qm listsnapshot ${root_set[aa]} | grep ${snap_string} 2> /dev/null)
								fi
					fi

					# if snapshot already exists the snapshot will be omitted
					if [ -n "${probe}" ]
						then	previous=exists
					fi
			fi

			if [ ! "${previous}" == "exists" ]
				then	if [ "${mode_create}" == "zfs" ]
						then	command="${config_ssh_source_part1}zfs snapshot ${snap_set[aa]}${snap_string_complete}${config_ssh_source_part2}"

						elif [ "${mode_create}" == "btrfs" ]
							then	command="${config_ssh_source_part1}btrfs subvolume snapshot -r ${root_set[aa]} ${snap_set[aa]}${snap_string_complete}${config_ssh_source_part2}"

						elif [ "${mode_create}" == "pipe" ]
							then	if [ "${mode}" == "file" ]
									then	command_part1="cat ${root_set[aa]}${snap_encrypt}"
									elif [ "${mode}" == "mysql" ]
										then	command_part1="mysqldump --defaults-extra-file=${config_credentials} --routines --triggers --single-transaction ${snap_file[aa]}${snap_encrypt}"
									elif [ "${mode}" == "pgsql" ]
										then	command_part1="pg_dump -h localhost -U ${config_credentials} -C -F c ${snap_file[aa]}${snap_encrypt}"
								fi

								command_part2="cat > ${snap_set[aa]}${snap_file[aa]}${snap_string_complete}${snap_file_type[aa]}${change_user[aa]}"
								command="${config_ssh_source_part1}${command_part1}${config_ssh_source_part2} | ${config_ssh_target_part1}${command_part2}${config_ssh_target_part2}"

						elif [ "${mode_create}" == "rsync" ]
							then	command="${config_ssh_source_part1}rsync ${config_options_rsync} ${root_set[aa]}${config_options_rsync2} ${snap_set[aa]}${snap_file[aa]}${snap_string_complete}${snap_file_type[aa]}${change_user[aa]}${config_ssh_source_part2}"

						elif [ "${mode_create}" == "kvm" ]
							then	command="${config_ssh_source_part1}qm snapshot ${root_set[aa]} ${snap_string}${config_ssh_source_part2}"
					fi

					# If snapshots not created by this script should be handled, existing_only can be set
					if [ ! -n "${snapshots_existing_only}" ]
						then	if [ "${check_commands}" == "set" ]
								then	echo "${command}"
								else	eval ${command}
							fi
					fi

					if [ "${config_function}" == "list" ]
						then	# determining the snapshots and their number
							if [ "${mode_snapshot}" == "zfs" ]
								then	if [ ! -z ${root_set[aa]} ]
										then	if [ -n "${config_ssh_target_part1}" ]
												then	snap_shots_strict=$(ssh ${config_server}${config_port} "find ${root_set[aa]}/.zfs/snapshot/${snap_name}* -maxdepth 0 -printf "%f\n" 2> /dev/null")
												else	snap_shots_strict=$(find ${root_set[aa]}/.zfs/snapshot/${snap_name}* -maxdepth 0 -printf "%f\n" 2> /dev/null)
											fi

											snap_shots_strict=$(echo "${snap_shots_strict}" | sed "s;${snap_name};${snap_set[aa]}@${snap_name};g" 2> /dev/null)

										else	if [ -n "${config_ssh_target_part1}" ]
												then	snap_shots_strict=$(ssh ${config_server}${config_port} "zfs list -t snapshot" | grep ${snap_set[aa]}${snap_string_separator_1}${snap_name} | awk '{ print $1 }')
												else	snap_shots_strict=$(zfs list -t snapshot | grep ${snap_set[aa]}${snap_string_separator_1}${snap_name} | awk '{ print $1 }')
											fi
									fi

								elif [ "${mode_snapshot}" == "btrfs" ] || [ "${mode_snapshot}" == "file" ]
									then	if [ -n "${config_ssh_target_part1}" ]
											then	snap_shots_strict=$(ssh ${config_server}${config_port} "find ${snap_set[aa]}${snap_file[aa]}${snap_string_separator_1}${snap_name}* -maxdepth 0 2> /dev/null")
											else	snap_shots_strict=$(find ${snap_set[aa]}${snap_file[aa]}${snap_string_separator_1}${snap_name}* -maxdepth 0 2> /dev/null)
										fi

								elif [ "${mode_snapshot}" == "kvm" ]
									then	if [ -n "${config_ssh_target_part1}" ]
											then	snap_shots_strict=$(ssh ${config_server}${config_port} "qm listsnapshot ${root_set[aa]} | awk '{print $1}' | grep ${snap_name} 2> /dev/null")
											else	snap_shots_strict=$(qm listsnapshot ${root_set[aa]} | awk '{print $1}' | grep ${snap_name} 2> /dev/null)
										fi
							fi

							snap_number_strict=$(echo ${snap_shots_strict} | awk -F ' ' '{print NF}')

							if [ "${check_snapshots}" == "set" ]
								then	printf "The Snapshotnumber is ${snap_number_strict}:\n${snap_shots_strict}\n"
							fi

							while [ "${snap_number_strict}" -gt "${snap_limit[aa]}" ]
							do	snap_del=$(echo ${snap_shots_strict} | awk '{ print $1 }')

								if [ "${mode_create}" == "kvm" ]
									then	command="${config_ssh_target_part1}qm delsnapshot ${root_set[aa]} ${snap_del}${config_ssh_target_part2}"

									elif [ "${mode_create}" == "zfs" ]
										then	command="${config_ssh_target_part1}zfs destroy ${snap_del}${config_ssh_target_part2}"

									elif [ "${mode_create}" == "btrfs" ]
										then	command="${config_ssh_target_part1}btrfs subvolume delete ${snap_del}${config_ssh_target_part2}"

									elif [ "${mode_create}" == "rsync" ] || [ "${mode_create}" == "pipe" ]
										then	command="${config_ssh_target_part1}rm -rf ${snap_del}${config_ssh_target_part2}"
								fi

								snap_shots_strict=$(echo ${snap_shots_strict} | cut -d " " -f 2-)
								snap_number_strict=$((${snap_number_strict} - 1))

								if [ "${check_commands}" == "set" ]
									then	echo "${command}"
									else	eval ${command}
								fi
							done
					fi
			fi
	fi
done
#!/bin/bash
#
# -----------------------------------------------------------------------------
#
# Author:	Marcel Keller (m-k-r)
# Usage:	uses config files to create and delete snapshots for btrfs, zfs, file, directory, mysql, pgsql and kvm
# License:	GPLv3 http://www.gnu.org/licenses/gpl-3.0
#
# ----------------------------- Global Variables ------------------------------

version=1.1
usage="usage: own-snapshot [parameter]

 -c	create initial config-directories, upgrade elements, create and change elements and jobs (not yet implemented)
 -e	name of the element without '.snap'at the end
 -i	impede new snapshots. used to handle snapshots or files created by other programms
 -f	the frequency as defined in the config file (hourly, daily, weekly)
 -l	either date-string (list) or complete label (single). mainly used by own-backup
 -o	output level: previous, commands, config, snapshots, full
 -v	show version of this script
 -h	this page

parameter used by own-backup

 -m	mode (btrfs, zfs)
 -n	target for snapshot
 -p	port for ssh
 -q	path to credentials file for sql
 -r	source for snapshot
 -s	server
 -z	certificate file/gpg id"
dir_root=/usr/local/own-snapshot
dir_modules=${dir_root}/modules
dir_conf=/etc/own-snapshot
config_options_rsync="-a"
supported_mode="btrfs zfs file kvm lxd mysql pgsql ldap"
supported_element_version=1.2


# --------------------------------- Parameter ----------------------------------

if [[ "$#" == "0" ]]; then
	echo "${usage}" && exit 0
fi

while getopts ":c:e:if:l:m:n:o:p:q:r:s:z:vh" opt; do
	case ${opt} in
		c)	arg_config=$OPTARG
			;;
		e)	arg_element=$OPTARG
			;;
		i)	snap_new_impede=set
			;;
		f)	current_frequency=$OPTARG
			;;
		l)	snap_string=$OPTARG
			;;
		m)	mode=$OPTARG
			;;
		n)	snap_set=($OPTARG)
			;;
		o)	output=$OPTARG
			;;
		p)	config_port=($OPTARG)
			;;
		q)	config_credentials=$OPTARG
			;;
		r)	root_set=($OPTARG)
			;;
		s)	config_server=$OPTARG
			;;
		z)	config_encryption=$OPTARG
			;;
		v)	echo "${version}"
			exit 0
			;;
		h)	echo "${usage}"
			exit 0
			;;
		?)	echo "Invalid option: -$OPTARG" >&2
			exit 1
			;;
	esac
done

# --------------------------------- Config -------------------------------------

if [[ -n "${arg_config}" ]]; then
	backend=snapshot
	export dir_conf arg_config backend
	${dir_modules}/do-config
	exit 0
fi

## output-level:
##	previous:	checks if previous snapshot with the same name exists
##	commands:	show commands for snapshot & snapshot-deletion
##	progress:	from own-backup will be translated to previous
##	snapvars:	from own-backup will be translated to commands
##	config:		checks if the configuration is valid
##	snapshots:	commands + show the snapshotlists, -numbers
##	full:		all the above

# define the function and basic parameters
if [[ -n "${arg_element}" ]]; then
	config_function="list"
	element=${dir_conf}/snapshot/${arg_element}.snap; else
	config_function="single"
	snap_limit=(1)
fi

# ------------------------------- Functions ------------------------------------

function set-file() {
	# set-file has to be in a function since it is called if root_set=tar again
	if [[ "${mode}" == "tar" ]]; then
		mode_create=rsync
		config_compression=${container_compression}
		config_encryption=${container_encryption}
		snap_string=${container_snap_string}
		snap_container_extension=".tar"
		unset container_create snap_compress snap_compress_extension snap_encrypt snap_encrypt_extension container_snap_string;

	# config_user has to be in the format user_id:group_id
	elif [[ -n "${config_user}" ]]; then
		probe=$(echo ${config_user} | grep ":" || true)
		if [[ ! -n "${probe}" ]]; then
			config_user="${config_user}:${config_user}"
		fi
	fi

	if [[ -n "${container_create}" ]]; then
		# check if all targets are in the same directory
		container_path=$(echo "${snap_set[@]}" | awk '{print $NF}' | rev | cut -d "/" -f 2- | rev)/
		probe=$(echo "${snap_set[@]}" | sed "s;${container_path};;g" | grep "/")
		if [[ -n "${probe}" ]]; then
			echo "the target has to be in the same directory as the tar-file" && exit 1
		fi
		container_compression=${config_compression}
		container_encryption=${config_encryption}
		container_snap_string=${snap_string}
		unset snap_string
		if [[ "${snap_flags}" == "container" ]]; then
			unset config_compression config_encryption;
		elif [[ "${snap_flags}" == "file" ]]; then
			unset container_compression container_encryption
		fi
	fi

	if [[ -n "${config_encryption}" ]]; then
		# if config_encryption is a ssl certificate it is always a path. this way it is compatible with the current config file
		probe=$(echo ${config_encryption} | cut -c 1)
		if [[ "${probe}" == "/" ]] || [[ "${probe}" == "~" ]]; then
			# if encryption via certificate
			if [[ "${mode_create}" == "pipe" ]]; then
				snap_encrypt=" | openssl smime -encrypt -binary -text -aes256 -outform DER ${config_encryption}";
			elif [[ "${mode_create}" == "rsync" ]]; then
				snap_encrypt=" && openssl smime -encrypt -binary -text -aes256 -outform DER -in INFILE -out OUTFILE ${config_encryption} && rm -rf "
			fi
			snap_encrypt_extension=".enc"; else
			# if encryption via gpg
			if [[ "${mode_create}" == "pipe" ]]; then
				snap_encrypt=" | gpg -r ${config_encryption} -e";
			elif [[ "${mode_create}" == "rsync" ]]; then
				snap_encrypt=" && gpg -r ${config_encryption} -e INFILE && rm -rf "
			fi
			snap_encrypt_extension=".gpg"
		fi
		unset config_encryption
	fi

	if [[ -n "${config_compression}" ]]; then
		if [[ "${config_compression}" == "gzip" ]]; then
			if [[ "${mode_create}" == "pipe" ]]; then
				snap_compress=" | gzip";
			elif [[ "${mode_create}" == "rsync" ]]; then
				snap_compress=" && gzip"
			fi
			snap_compress_extension=".gz";
		elif [[ "${config_compression}" == "xz" ]]; then
			if [[ "${mode_create}" == "pipe" ]]; then
				snap_compress=" | xz";
			elif [[ "${mode_create}" == "rsync" ]]; then
				snap_compress=" && xz"
			fi
			snap_compress_extension=".xz"; else
			echo "compression is not valid: ${config_compression}. valid is gzip or xz" && exit 1
		fi

		if [[ -n "${config_compression_lvl}" ]]; then
			# test if config_compression_lvl is a valid single digit integer
			#if [[ "${config_compression_lvl}" =~ "^[0-9]$" ]] ; then (for some reason not working)
			if [[ "${config_compression_lvl}" -le "9" ]] && [[ "${config_compression_lvl}" -ge "1" ]] ; then
				snap_compress+=" -${config_compression_lvl}"; else
				echo "the compression level is not valid: ${config_compression_lvl}. valid is 1-9" && exit 1
			fi
		fi
		unset config_compression config_compression_lvl
	fi
}

function check-file() {
	if [[ "${mode}" == "file" ]] && [[ ! "${root_set[aa]}" == "tar" ]]; then
		if [[ -n "${ssh_source_p1}" ]]; then
			probe=$(ssh ${ssh_server} "find ${root_set[aa]} -maxdepth 0 -type d 2> /dev/null"); else
			probe=$(find ${root_set[aa]} -maxdepth 0 -type d 2> /dev/null)
		fi

		if [[ -n "${probe}" ]]; then
			config_options_rsync2="/"
			if [[ "${mode_create}" == "pipe" ]]; then
				echo "${root[aa]} is a directory and mode_create is pipe. this does not work" && exit 1
			fi
		fi
	fi

	# if target doesn't end with a slash, the part behind the slash overrides the filename from source
	probe=$(echo ${snap_set[aa]} | rev | cut -c 1)
	if [[ "${probe}" == "/" ]]; then
		local_snap_file=$(echo "${root_set[aa]}" | rev | cut -d "/" -f 1 | rev); else
		local_snap_file=$(echo "${snap_set[aa]}" | rev | cut -d "/" -f 1 | rev)
		snap_set[aa]=$(echo "${snap_set[aa]}" | rev | cut -d "/" -f 2- | rev)/
	fi
	# if the filename contains a dot, everything behind the first dot is considered an extension
	probe=$(echo "${local_snap_file}" | grep "\.")
	if [[ -n "${probe}" ]]; then
		snap_file_type_static=.$(echo "${local_snap_file}" | cut -d "." -f 2-)
		local_snap_file=$(echo "${local_snap_file}" | cut -d "." -f 1)

	fi

	if [[ "${root_set[aa]}" == "tar" ]]; then
		mode=tar
		set-file
		container_dir=${snap_set[aa]}
		snap_set[aa]+=${local_snap_file}
		snap_file_type=${snap_file_type_static}${snap_container_extension}${snap_compress_extension}${snap_encrypt_extension}
		if [[ -n "${ssh_target_p1}" ]]; then
			probe=$(ssh ${ssh_server} "find ${snap_set[aa]}${snap_string}${snap_file_type} -maxdepth 0 2> /dev/null"); else
			probe=$(find ${snap_set[aa]}${snap_string}${snap_file_type} -maxdepth 0 2> /dev/null)
		fi

		if [[ -n "${probe}" ]]; then
			container_parameter="r"
			unset add_snapshot; else
			container_parameter="c"
		fi; else
		snap_set[aa]+=${local_snap_file}
		snap_file_type=${snap_file_type_static}${snap_container_extension}${snap_compress_extension}${snap_encrypt_extension}
		if [[ -n "${container_create}" ]]; then
			container_source+=" ${local_snap_file}${snap_file_type}"
		fi
	fi
}

function get-snapshots() {
	local local_mode local_server local_root local_identifier local_datestring snap_shots
	local_mode="${1}"
	local_root="${2}"
	local_identifier="${3}"
	local_datestring="${4}"
	local_server="${5}"

	# determining the snapshots and their number
	if [[ "${local_mode}" == "zfs" ]]; then
		if [[ -n "${ssh_target_p1}" ]]; then
			snap_shots=$(ssh ${local_server} "zfs get -Ho value -r name ${local_root}" | tail -n +2); else
			snap_shots=$(zfs get -Ho value -r name "${local_root}" | tail -n +2)
		fi
		if [[ "${snap_pre_rollback}" == "set" ]]; then
			snap_pre_rollback=${snap_shots##*$'\n'}
		fi
		snap_shots_strict=$(echo "${snap_shots}" | grep ${local_identifier})

	elif [[ "${local_mode}" == "btrfs" ]] || [[ "${1}" == "file" ]]; then
		if [[ -n "${ssh_target_p1}" ]]; then
			snap_shots_strict=$(ssh ${local_server} "find ${local_root}${local_identifier}* -maxdepth 0 2> /dev/null"); else
			snap_shots_strict=$(find "${local_root}"${local_identifier}* -maxdepth 0 2> /dev/null)
		fi

	elif [[ "${local_mode}" == "lxd" ]]; then
		if [[ -n "${ssh_target_p1}" ]]; then
			snap_shots_strict=$(ssh ${local_server} "lxc info ${local_root} | sed -e '1,/^Snapshots:/d' | awk ' { print $1 } ' 2> /dev/null"); else
			snap_shots_strict=$(lxc info "${local_root}" | sed -e '1,/^Snapshots:/d' | awk ' { print $1 } ' 2> /dev/null)
		fi
		snap_shots_strict=$(echo "${snap_shots_strict}" | sed "s;^;${local_root}/;" 2> /dev/null)

	elif [[ "${local_mode}" == "kvm" ]]; then
		if [[ -n "${ssh_target_p1}" ]]; then
			snap_shots_strict=$(ssh ${local_server} "qm listsnapshot ${local_root} | awk '{print $1}' | grep ${local_identifier} 2> /dev/null"); else
			snap_shots_strict=$(qm listsnapshot "${local_root}" | awk '{print $1}' | grep ${local_identifier} 2> /dev/null)
		fi
		snap_shots_strict=$(echo "${snap_shots_strict}" | sed "s;^;${local_root}:;" 2> /dev/null)
	fi
	previous=$(echo "${snap_shots_strict}" | grep "${local_datestring}")
}

function snap-all() {
	local local_mode local_root local_target local_snap_string
	local_mode="${1}"
	local_root="${2}"
	local_snap_string="${3}"
	local_target="${4}"
	if [[ "${local_mode}" == "zfs" ]]; then
		if [[ -n "${snap_pre_rollback}" ]]; then
			if [[ -n "${check_commands}" ]]; then
				echo "${ssh_source_p1}zfs rollback ${snap_pre_rollback}${ssh_source_p2}"; else
				if [[ -n "${ssh_source_p1}" ]]; then
					ssh ${ssh_server} "zfs rollback ${snap_pre_rollback}"; else
					zfs rollback "${snap_pre_rollback}"
				fi
			fi
			snap_pre_rollback="set"
		fi
		command="${ssh_source_p1}zfs snapshot ${local_root}${local_snap_string}${ssh_source_p2}"

	elif [[ "${local_mode}" == "btrfs" ]]; then
		command="${ssh_source_p1}btrfs subvolume snapshot -r ${local_root} ${local_target}${local_snap_string}${ssh_source_p2}"

	elif [[ "${local_mode}" == "lxd" ]]; then
		command="${ssh_source_p1}lxc snapshot ${local_root} ${local_root}${local_snap_string}${ssh_source_p2}"

	elif [[ "${local_mode}" == "kvm" ]]; then
		command="${ssh_source_p1}qm snapshot ${local_root} ${local_snap_string}${ssh_source_p2}"
	fi
}

function snap-file() {
	local local_additional_tasks local_snap_encrypt
	# add compression and encryption for rsync created files
	if [[ "${mode_create}" == "rsync" ]]; then
		if [[ -n "${snap_compress}" ]]; then
			local_additional_tasks="${snap_compress} ${snap_set[aa]}${snap_string}${snap_file_type_static}${snap_container_extension}"
		fi

		if [[ -n "${snap_encrypt}" ]]; then
			local_snap_encrypt=$(echo "${snap_encrypt}" | sed "s;INFILE;${snap_set[aa]}${snap_string}${snap_file_type_static}${snap_container_extension}${snap_compress_extension};g" | sed "s;OUTFILE;${snap_set[aa]}${snap_string}${snap_file_type};g")
			local_additional_tasks+="${local_snap_encrypt} ${snap_set[aa]}${snap_string}${snap_file_type_static}${snap_container_extension}${snap_compress_extension}"
		fi
	fi
	if [[ -n "${config_user}" ]]; then
		local_additional_tasks+=" && chown -R ${config_user} ${snap_set[aa]}${snap_string}${snap_file_type}"
	fi

	if [[ "${mode_create}" == "pipe" ]]; then
		if [[ "${mode}" == "file" ]]; then
			command_part1="cat ${root_set[aa]}"
		elif [[ "${mode}" == "mysql" ]]; then
			command_part1="mysqldump --defaults-extra-file=${config_credentials} --routines --triggers --single-transaction -h ${sql_server} ${root_set[aa]}"
		elif [[ "${mode}" == "pgsql" ]]; then
			command_part1="pg_dump -h ${sql_server} -U ${config_credentials} -C -F c ${root_set[aa]}"
		elif [[ "${mode}" == "ldap" ]]; then
			command_part1="slapcat -n ${root_set[aa]}"
		fi
		command_part1+="${snap_compress}""${snap_encrypt}"
		command_part2="cat > ${snap_set[aa]}${snap_string}${snap_file_type}${local_additional_tasks}"
		command="${ssh_source_p1}${command_part1}${ssh_source_p2} | ${ssh_target_p1}${command_part2}${ssh_target_p2}"

	elif [[ "${mode_create}" == "rsync" ]]; then
		if [[ "${mode}" == "tar" ]]; then
			if [[ -n "${container_source}" ]]; then
				command="${ssh_target_p1}tar --remove-files -${container_parameter}C ${container_dir}${container_source} -f ${snap_set[aa]}${snap_string}${snap_file_type_static}${snap_container_extension}${local_additional_tasks}${ssh_target_p2}"
				unset container_source
			fi; else

			if [[ -n "${ssh_source_rsync}" ]] || [[ -n "${ssh_rsync_target}" ]]; then
				command="rsync ${config_options_rsync} ${ssh_source_rsync}${root_set[aa]}${config_options_rsync2} ${ssh_rsync_target}${snap_set[aa]}${snap_string}${snap_file_type_static}${local_additional_tasks}"; else
				command="${ssh_source_p1}rsync ${config_options_rsync} ${root_set[aa]}${config_options_rsync2} ${snap_set[aa]}${snap_string}${snap_file_type_static}${local_additional_tasks}${ssh_source_p2}"
			fi
		fi
	fi
}

function do-snapdel() {
	local local_snap_shots local_mode local_snap_number local_snap_limit local_ssh_1 local_ssh_2
	local_snap_shots="${1}"
	local_mode="${2}"
	local_snap_number="${3}"
	local_snap_limit="${4}"
	local_ssh_1="${5}"
	local_ssh_2="${6}"

	while [[ "${local_snap_number}" -gt "${local_snap_limit}" ]]
	do	snap_del=$(echo "${local_snap_shots}" | awk 'NR==1{print $0}')

		if [[ "${local_mode}" == "kvm" ]]; then
			snap_del_string=$(echo "${snap_del}" | cut -d ":" -f 2-)
			snap_del=$(echo "${snap_del}" | cut -d ":" -f 1)
			command="${local_ssh_1}qm delsnapshot ${snap_del} ${snap_del_string}${local_ssh_2}"

		elif [[ "${local_mode}" == "zfs" ]]; then
			command="${local_ssh_1}zfs destroy ${snap_del}${local_ssh_2}"

		elif [[ "${local_mode}" == "btrfs" ]]; then
			command="${local_ssh_1}btrfs subvolume delete ${snap_del}${local_ssh_2}"

		elif [[ "${local_mode}" == "rsync" ]] || [[ "${local_mode}" == "pipe" ]]; then
			command="${local_ssh_1}rm -rf ${snap_del}${local_ssh_2}"

		elif [[ "${local_mode}" == "lxd" ]]; then
			command="${local_ssh_1}lxc delete ${snap_del}${local_ssh_2}"
		fi

		local_snap_shots=$(echo "${local_snap_shots}" | tail -n +2)
		local_snap_number=$((${local_snap_number} - 1))

		if [[ -n "${check_commands}" ]]; then
			echo "${command}"; else
			eval ${command}
		fi
	done
}

# -------------------------------- Main Script ---------------------------------

if [[ "${config_function}" == "list" ]]; then
	# check if config is set
	if [[ -n "$check_config" ]]; then
		probe=$(find ${element} 2>&1)
		if [[ ! "${probe}" == "${element}" ]]; then
			echo "the config does not exist" && exit 1
		fi
	fi

	# backup ifs
	IFSBAK=${IFS}
	# parse the blocks
	block_config=$(awk '/^#config#$/ {flag=!flag; count+=1; next} flag && count < 2 {print}' ${element})
	block_table=$(awk '/^#table#$/ {flag=!flag; count+=1; next} flag && count < 2 {print}' ${element})
	# parse the blocks (into array) by newline, in case a source or target contains spaces
	IFS=$'\n'
	root_set=($(awk '/^#source#$/ {flag=!flag; count+=1; next} flag && count < 2 {print}' ${element}))
	snap_set=($(awk '/^#target#$/ {flag=!flag; count+=1; next} flag && count < 2 {print}' ${element}))
	IFS=${IFSBAK}

	# check element version
	element_version=$(awk -v condition1="version" '$1 == condition1 { print $3 }' <<< "${block_config}")
	if [[ ! "${element_version}" == "${supported_element_version}" ]]; then
		echo "the element has not the requiered version. please update the elements with own-snapshot -c upgrade" && exit 1
	fi
	config_server=$(awk -v condition1="server" '$1 == condition1 { print $3 }' <<< "${block_config}")
	config_port=$(awk -v condition1="server" '$1 == condition1 { print $4 }' <<< "${block_config}")
	mode=$(awk -v condition1="mode" '$1 == condition1 { print $3 }' <<< "${block_config}")
	snap_label=$(awk -v condition1="label" '$1 == condition1 { print $3 }' <<< "${block_config}")
	# snap_string can be given by argument so that all snapshots follow the same scheme
	if [[ -n "${snap_string}" ]]; then
		snap_date=${snap_string}; else
		snap_date=$(date +$(awk -v condition1="dateformat" '$1 == condition1 { print $3 }' <<< "${block_config}"))
	fi
	snap_identifier=$(awk -v condition1="identifier" '$1 == condition1 { print $3 }' <<< "${block_config}")
	snap_string_separator_1=$(awk -v condition1="separator" '$1 == condition1 { print $3 }' <<< "${block_config}")
	snap_string_separator_2=$(awk -v condition1="separator" '$1 == condition1 { print $4 }' <<< "${block_config}")
	snap_flags=$(awk -v condition1="snap_flags" '$1 == condition1 { print $3 }' <<< "${block_config}")
	if [[ "${snap_flags}" == "existing" ]]; then
		snap_new_impede=set;
		unset snap_flags
	elif [[ "${snap_flags}" == "rollback" ]]; then
		snap_pre_rollback=$(awk -v condition1="snap_flags" '$1 == condition1 { print $4 }' <<< "${block_config}" | tr ":" " ")
		unset snap_flags
	fi
	snap_location=$(awk -v condition1="snap_location" '$1 == condition1 { print $3 }' <<< "${block_config}")
	config_credentials=$(awk -v condition1="credentials" '$1 == condition1 { print $3 }' <<< "${block_config}")
	config_encryption=$(awk -v condition1="encryption" '$1 == condition1 { print $3 }' <<< "${block_config}")
	config_compression=$(awk -v condition1="compression" '$1 == condition1 { print $3 }' <<< "${block_config}")
	config_compression_lvl=$(awk -v condition1="compression" '$1 == condition1 { print $4 }' <<< "${block_config}")
	config_user=$(awk -v condition1="user" '$1 == condition1 { print $3 }' <<< "${block_config}")

	# get snapshot table
	supported_frequencies=$(head -n 1 <<< "${block_table}")
	# get the retention number of snapshots for current frequency
	snap_nmbr=$(awk -v name="${current_frequency}" '{for (i=1;i<=NF;i++) if ($i==name) print i; exit}' <<< "${supported_frequencies}")
	if [[ ! -n "${snap_nmbr}" ]]; then
		echo "frequency: ${current_frequency} not found. supported are: ${supported_frequencies}" >&2 && exit 1
	fi
	snap_limit=($(tail -n +2 <<< "${block_table}" | awk -v snap_nmbr="${snap_nmbr}" '{print $snap_nmbr}'))

	# the snap_string_separators need to be flexible for handling date-based versioning from other sources
	if [[ ! -n "${snap_string_separator_2}" ]]; then
		snap_string_separator_2="_"
	elif [[ "${snap_string_separator_2}" == "empty" ]]; then
		unset snap_string_separator_2
	fi

	if [[ "${snap_identifier}" == "number" ]] || [[ ! -n "${snap_identifier}" ]]; then
		snap_identifier=${snap_nmbr};
	elif [[ "${snap_identifier}" == "frequency" ]]; then
		snap_identifier=${current_frequency}
	elif [[ "${snap_identifier}" == "empty" ]]; then
		unset snap_identifier; else
		echo "snap_identifier is not valid: ${snap_identifier}" && exit 1
	fi
	# get the names for the snapstring
	snap_name="${snap_label}""${snap_identifier}""${snap_string_separator_2}"
	snap_string="${snap_name}""${snap_date}"

	# if the last field in root_set is tar, then the previous fields will stored in a tar-file
	if [[ -n "${root_set[@]}" ]]; then
		container_create=$(echo "${root_set[-1]}" | grep "tar" 2> /dev/null)
	fi
	unset element block_config block_table supported_frequencies; else
	# translations own-backup arguments
	if [[ -n "${config_server}" ]]; then
		probe=$(echo "${config_server}" | grep "~" || true)
		if [[ -n "${probe}" ]]; then
			snap_location=$(echo "${config_server}" | cut -d "~" -f 2)
			config_server=$(echo "${config_server}" | cut -d "~" -f 1)
		fi
	fi
	snap_name=$(echo "${snap_string}" | cut -d "_" -f 1)_
	snap_date=$(echo "${snap_string}" | cut -d "_" -f 2)
	if [[ "${mode}" == "zfs" ]]; then
		root_set=(${snap_set[@]})
	fi
fi

# translate mode to mode_create and mode_snapshot
if [[ -n "${mode}" ]]; then
	if [[ "${mode}" == "btrfs" ]] || [[ "${mode}" == "kvm" ]] || [[ "${mode}" == "lxd" ]] || [[ "${mode}" == "zfs" ]]; then
		mode_create=${mode}
		mode_snapshot=${mode}

	elif [[ "${mode}" == "mysql" ]] || [[ "${mode}" == "pgsql" ]]; then
		sql_server=localhost
		mode_create=pipe
		mode_snapshot=file

	elif [[ "${mode}" == "ldap" ]]; then
		mode_create=pipe
		mode_snapshot=file

	elif [[ "${mode}" == "file" ]]; then
		if ([[ -n "${config_compression}" ]] || [[ -n "${config_encryption}" ]]) && [[ ! "${snap_flags}" == "container" ]]; then
			mode_create=pipe; else
			mode_create=rsync
		fi
		mode_snapshot=file; else
		echo "${mode} is not supported mode. Valid are: ${supported_mode}" && exit 1
	fi; else
	echo "no mode is set" && exit 1
fi

# define outputlevel
if [[ -n "${output}" ]]; then
	if [[ "${output}" == "config" ]]; then
		check_config="set"

	elif [[ "${output}" == "previous" ]] || [[ "${output}" == "progress" ]]; then
		# this is a dummy for own-backup until it is updated
		add_snapshot="set"

	elif [[ "${output}" == "commands" ]] || [[ "${output}" == "snapvars" ]]; then
		check_commands="set"
		add_snapshot="set"

	elif [[ "${output}" == "snapshots" ]]; then
		check_commands="set"
		check_snapshots="set"
		snap_new_impede=set

	elif [[ "${output}" == "full" ]]; then
		check_config="set"
		check_previous="set"
		check_commands="set"
		check_snapshots="set"; else

		echo "no supported output-level found: ${output}" && exit 1
	fi; else
	# snapshots are read before the current snapshot is created. So a virtual snapshot has to be created
	add_snapshot="set"
fi

if [[ "${mode_create}" == "zfs" ]]; then
	snap_string_separator_1="@"
elif [[ "${mode_create}" == "kvm" ]]; then
	unset snap_string_separator_1
elif [[ ! -n "${snap_string_separator_1}" ]]; then
	snap_string_separator_1="_"
fi
snap_string=${snap_string_separator_1}${snap_string}

if [[ -n "${config_server}" ]]; then
	if [[ -n "${config_port}" ]]; then
		config_port=" -p ${config_port}"; else
		config_port=" -p 22"
	fi

	probe=$(ssh -O check -S ~/.ssh/%C  -p "${config_port}" "${config_server}" 2>&1 | grep 'No such file or directory')
	if [[ -n "${probe}" ]]; then
		# if not already exists, establish master connection for ssh. this will automatically close 1 minute after the script
		ssh -Nf -p "${config_port}" "${config_server}" -o ControlMaster=auto -o ControlPath=~/.ssh/%C -o ControlPersist=1m
	fi

	if  [[ ! -n "${snap_location}" ]] || [[ ! "${mode_snapshot}" == "file" ]]; then
		snap_location=server
	fi

	if [[ "${snap_location}" == "server" ]]; then
		ssh_source_p1="ssh -S ~/.ssh/%C ${config_server}${config_port} \""
		ssh_source_p2="\""
		ssh_target_p1="ssh -S ~/.ssh/%C ${config_server}${config_port} \""
		ssh_target_p2="\""

	elif	[[ "${snap_location}" == "local" ]]; then
		ssh_source_p1="ssh -S ~/.ssh/%C ${config_server}${config_port} \""
		ssh_source_p2="\""

		if [[ "${mode_create}" == "rsync" ]]; then
			ssh_source_rsync="-e \"ssh -S ~/.ssh/%C ${config_port}\" ${config_server}:"
		fi

	elif	[[ "${snap_location}" == "remote" ]]; then
		ssh_target_p1="ssh -S ~/.ssh/%C ${config_server}${config_port} \""
		ssh_target_p2="\""

		if [[ "${mode_create}" == "rsync" ]]; then
			ssh_rsync_target="-e \"ssh -S ~/.ssh/%C ${config_port}\" ${config_server}:"
		fi

	elif	[[ "${snap_location}" == "direct" ]]; then
		sql_server=${config_server}; else

		echo "something is wrong with the ssh settings" && exit 1
	fi

	ssh_server="-S ~/.ssh/%C ${config_server}${config_port}"
	unset config_server config_port snap_location
fi

if [[ "${mode_snapshot}" == "file" ]]; then
	set-file
elif [[ "${mode_snapshot}" == "zfs" ]]; then
	if [[ "${snap_pre_rollback}" ]]; then
		probe=$(echo "${snap_pre_rollback}" | grep "${current_frequency}")
		if [[ -n "${probe}" ]]; then
			snap_pre_rollback="set"; else
			unset snap_pre_rollback
		fi
	fi
fi

if [[ -n "${check_config}" ]]; then
	echo "under reconstruction"

	if [[ ! -n "${check_commands}" ]]; then
		exit 0
	fi
fi

# -------------------------------- Main Loop -----------------------------------

#set back the control variable
aa="-1"
for snap_limit_current in ${snap_limit[@]}
do	aa=$((${aa} + 1))
	if [[ -z "${snap_limit_current}" ]] || [[ "${snap_limit_current}" == "0" ]]; then
		continue
	fi

	if [[ -n "${check_commands}" ]]; then
		printf -- "\n--------------- ${root_set[aa]} ---------------\n"
	fi

	if [[ "${mode_snapshot}"  == "btrfs" ]]; then
		get-snapshots "${mode_snapshot}" "${snap_set[aa]}${snap_string_separator_1}" "${snap_name}" "${snap_date}" "${ssh_server}";
	elif [[ "${mode_snapshot}" == "file" ]]; then
		check-file
		get-snapshots "${mode_snapshot}" "${snap_set[aa]}${snap_string_separator_1}" "${snap_name}" "${snap_date}" "${ssh_server}"; else
		get-snapshots "${mode_snapshot}" "${root_set[aa]}" "${snap_name}" "${snap_date}" "${ssh_server}"
	fi

	# If snapshots not created by this script should be handled, existing_only can be set
	if [[ ! "${previous}" == "exists" ]] && [[ ! -n "${snap_new_impede}" ]]; then
		if [[ "${mode_snapshot}" == "file" ]]; then
			snap-file; else
			snap-all "${mode_create}" "${root_set[aa]}" "${snap_string}" ${snap_set[aa]}
		fi
		if [[ -n "${check_commands}" ]]; then
			echo "${command}"; else
			eval ${command}
		fi
	fi

	if [[ "${config_function}" == "list" ]]; then
		if [[ -n "${add_snapshot}" ]] && [[ ! -n "${snap_new_impede}" ]]; then
			snap_shots_strict=${snap_shots_strict}$'\n'"${snap_set[aa]}"${snap_string}${snap_file_type}
		fi
		snap_number_strict=$(echo "${snap_shots_strict}" | grep -v '^$' | awk 'END{print NR}')
		if [[ -n "${check_snapshots}" ]]; then
			printf "The Snapshotnumber is ${snap_number_strict}:\n${snap_shots_strict}\n"
			continue
		fi
		do-snapdel "${snap_shots_strict}" "${mode_create}" "${snap_number_strict}" "${snap_limit_current}" "${ssh_target_p1}" "${ssh_target_p2}"
	fi
	unset snap_file snap_file_type snap_file_type_static config_options_rsync2
done
